II.	Les critères de Bastien et Scapin et leurs explications

1.	Guidage
L’ensemble des moyens mis en œuvre pour conseiller, orienter, informer et conduire l’utilisateur lors de ses interactions avec l’ordinateur.
1.1.	Incitation
Inciter l’utilisateur à effectuer des actions spécifiques en lui fournissant des indices. Par exemple, guider les entrées de données en indiquant le format adéquat et les valeurs acceptables. Exemple : Date (jj/mm/aa)
1.2.	 Groupement/Distinction entre Items
Groupement des différents éléments visuels de façon cohérente et ordonnée.
1.2.1.	 Groupement/Distinction par la Localisation
Positionner les items les uns par rapport aux autres afin d’indiquer leur appartenance, ou non, à une classe donnée d’objets. Par exemple, grouper les options de menus en fonction des objets sur lesquels elles s’appliquent.
1.2.2.	 Groupement/Distinction par le Format
Donner aux éléments des caractéristiques graphiques particulières afin d’indiquer leur appartenance, ou non, à une classe donnée d’objets. Par exemple : utiliser un symbole et la couleur rouge pour les boîtes de dialogue d’alerte ou d’erreur.
1.3.	 Feedback immédiat
Dans tous les cas, l’ordinateur doit répondre à l’utilisateur en fonction des actions et des requêtes de ce dernier. Par exemple, dans les cas où les traitements sont longs, une information indiquant à l’utilisateur que les traitements sont en cours devrait lui être fournie.
1.4.	 Lisibilité
Les caractéristiques lexicales de présentation des informations sur l’écran doivent faciliter la lecture de ces informations. Par exemple, il est préférable de présenter un texte avec quelques lignes longues plutôt que de nombreuses lignes courtes.
2.	 Charge de travail
L’ensemble des éléments de l’interface qui a un rôle dans la réduction de la charge perceptive ou mnésique des utilisateurs, de même que dans l’augmentation de l’efficacité du dialogue.
2.1.	 Brièveté
Limiter le travail de lecture, d’entrée et les étapes par lesquelles doivent passer les usagers.
2.1.1.	 Concision
Réduire la charge de travail au niveau perceptif et mnésique pour ce qui est des éléments individuels d’entrée ou de sortie. Par exemple, lorsqu’une unité de mesure est associée à un champ de données, celle-ci doit faire partie du label du champ plutôt qu’être saisie par l’utilisateur.

2.1.2.	 Actions Minimales
Limiter les étapes par lesquelles doivent passer les utilisateurs. Par exemple, ne pas demander aux utilisateurs d’entrer des données qui peuvent être déduites par le système.
2.2.	 Densité Informationnelle
Réduire la charge de travail du point de vue perceptif et mnésique, pour des ensembles d’éléments et non pour des items. Par exemple, limiter la densité informationnelle de l’écran, en affichant seulement les informations nécessaires
3.	 Contrôle explicite
Prise en compte par le système des actions explicites des utilisateurs et le contrôle qu’ont les utilisateurs sur le traitement de leurs actions.
3.1.	 Actions Explicites
Expliciter la relation entre le fonctionnement de l’application et les actions des utilisateurs. Par exemple, l’entrée de commandes doit se terminer par une indication de fin (« Enter » , « OK ») à laquelle des possibilités d’édition doivent être préalables.
3.2.	 Contrôle Utilisateur
L’utilisateur doit pouvoir contrôler le déroulement des traitements informatiques en cours. Par exemple, autoriser l’utilisateur à interrompre tout traitement en cours.
4.	 Adaptabilité
Capacité à réagir selon le contexte et selon les besoins et les préférences des utilisateurs.
4.1.	 Flexibilité
Mettre à la disposition des utilisateurs des moyens pour personnaliser l’interface afin de rendre compte de leurs stratégies ou habitudes de travail et des exigences de la tâche. Par exemple, les utilisateurs doivent pouvoir désactiver des affichages inutiles.
4.2.	 Prise en Compte de l’Expérience de l’Utilisateur
Le système doit respecter le niveau d’expérience de l’utilisateur. Par exemple, prévoir des choix d’entrées pas-à-pas ou multiples selon l’expérience des utilisateurs.
5.	 Gestion des Erreurs
Moyens permettant d’une part d’éviter ou de réduire les erreurs, d’autre part de les corriger lorsqu’elles surviennent.
5.1.	 Protection Contre les Erreurs
Mettre en place des moyens pour détecter et prévenir les erreurs. Par exemple, toutes les actions possibles sur une interface doivent être envisagées et plus particulièrement les appuis accidentels des touches du clavier afin que les entrées non-attendues soient détectées.
5.2.	 Qualité des Messages d’Erreurs
S’assurer que l’information donnée aux utilisateurs sur la nature des erreurs commises (syntaxe, format, etc.) et sur les actions à entreprendre pour les corriger, soit pertinente, facile à lire et exacte. Par exemple, utiliser un vocabulaire neutre, non-personnalisé, non réprobateur dans les messages d’erreurs ; éviter l’humour.
5.3.	 Correction des Erreurs
Mettre à la disposition des utilisateurs des moyens pour corriger leurs erreurs. Par exemple, fournir la possibilité de modifier les commandes lors de leur saisie.
6.	 Homogénéité/Cohérence
Les choix de conception d’interface doivent être conservés pour des contextes identiques, et doivent être différents pour des contextes différents. Par exemple, toujours afficher au même endroit l’incitation pour la saisie des données ou des commandes.
7.	 Signifiance des Codes et Dénominations
Il doit y avoir adéquation entre l’objet ou l’information affichée ou entrée, et son référent. Par exemple, rendre les règles d’abréviation explicites.
8.	 Compatibilité
Il faut qu’il y ait accord entre les caractéristiques des utilisateurs et des tâches, d’une part, et l’organisation des sorties, des entrées et du dialogue d’une application donnée, d’autre part. Par exemple, les termes employés doivent être familiers aux utilisateurs, et relatifs à la tâche à réaliser.


