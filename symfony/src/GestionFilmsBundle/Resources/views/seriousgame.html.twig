<section id="up" xmlns="http://www.w3.org/1999/html">
    <li>
        <p>******************QUESTIONS GENERALES SUR LE DEVLOPPEMENT WEB*******</p>
        <ul><a href="#motive" style="color:#0088CC;font-weight: bold">Qu'est ce qui vous motive ou vous intéresse dans le développement ?</a></ul>
        <ul><a href="#defi" style="color:#8959A8;font-weight: bold">Quel a été le dernier défi technique que vous avez expérimenté et comment l'avez-vous résolu ?</a></ul>
        <ul><a href="#considerations" style="color:#00ee00;font-weight: bold">Quelles considérations en terme d'UI, Sécurité, Performance, SEO,
                Maintenabilité ou Technologie faites-vous lorsque vous concevez une application web ou site ?</a></ul>
        <ul><a href="#gestionversions" style="color:#d17581;font-weight: bold">Avec quels logiciels de gestion de versions êtes-vous familier?</a></ul>
        <ul><a href="#workflow" style="color:#f6bf01;font-weight: bold">Pouvez-vous décrire comment vous travaillez (votre workflow) lorsque vous créez une page web ?</a></ul>
        <ul><a href="#apdg" style="color:#080808;font-weight: bold"> Pouvez-vous décrire la différence entre amélioration progressive et dégradation gracieuse ?</a></ul>
        <ul><a href="#perfo" style="color:#66afe9;font-weight: bold">Comment optimisez-vous les performances de vos pages web (assets/ressources) ?</a></ul>
        <ul><a href="#tcp" style="color:#449d44;font-weight: bold">Quels outil utilisez-vous pour tester la performance de votre code ?</a></ul>

        <p>******************HTML5*******************</p>
        <ul><a href="#html5" style="color:#8959A8;font-weight: bold">HTML5</a></ul>
        <ul><a href="#balise" style="color:#8959A8;font-weight: bold">Les balises</a></ul>
        <ul><a href="#meta" style="color:#8959A8;font-weight: bold">Les balises Meta</a></ul>
        <ul><a href="#listes" style="color:#8959A8;font-weight: bold">Les LISTES</a></ul>
        <ul><a href="#tableau" style="color:#8959A8;font-weight: bold">Les Tableaux</a></ul>
        <ul><a href="#sem" style="color:#8959A8;font-weight: bold">Les balises SEMANTIQUES</a></ul>

        <ul><a href="#doctype" style="color:#0000F0;font-weight: bold">Que fait un doctype ?</a></ul>
        <ul><a href="#modehtml" style="color:#916319;font-weight: bold">Quelle est la différence entre les modes standard et quirks ?</a></ul>
        <ul><a href="#xhtml" style="color:#e74c3c;font-weight: bold"> Quelles sont les différences entre HTML et XHTML ?</a></ul>
        <ul><a href="#contenttype" style="color:#2b542c;font-weight: bold"> Y a-t-il des problèmes à envoyer des pages avec le Content-Type application/xhtml+xml ?</a></ul>
        <ul><a href="#multilingue" style="color:#e74c3c;font-weight: bold"> Comment servez-vous une page avec du contenu multilingue ?</a></ul>
        <ul><a href="#data" style="color:#00ee00;font-weight: bold"> À quoi les attributs data- servent-ils ?</a></ul>
        <ul><a href="#storage" style="color:#0088CC;font-weight: bold">Décrivez la différence entre cookie, sessionStorage, et localStorage.</a></ul>
        <ul><a href="#script" style="color:#101010;font-weight: bold"> Quelle esl la différence entre "script", "script async" et "script defer"</a></ul>
        <ul><a href="#link" style="color:#985f0d;font-weight: bold">Pourquoi est-ce généralement une bonne idée de positionner les "link" à l'intérieur
                de "HEAD" et les SCRIPT juste avant "/BODY"? Connaissez-vous des exceptions ?</a></ul>
        <ul><a href="#progressif" style="color:#8959A8;font-weight: bold">Qu'est-ce que le rendu progressif ?</a></ul>

        <p>******************JS*******************</p>
        <ul><a href="#js" style="color:#8959A8;font-weight: bold">JS</a></ul>
        <ul><a href="#jquery" style="color:#0088CC;font-weight: bold"> JQUERY</a></ul>
        <ul><a href="#ajax" style="color:#880000;font-weight: bold"> AJAX</a></ul>
        <ul><a href="#angjs" style="color:#880000;font-weight: bold"> AngularJS</a></ul>
        <ul><a href="#this" style="color:#ffaa00;font-weight: bold">Expliquez comment fonctionne this en Javascript.</a></ul>
        <ul><a href="#hp" style="color:#00ee00;font-weight: bold">Expliquez comment fonctionne l'héritage de prototype.</a></ul>
        <ul><a href="#nun" style="color:#080808;font-weight: bold"> Quelle est la différence entre une variable null, undefined et non déclarée ?
                Comment feriez-vous pour vérifier chacun de ces états ?</a></ul>
        <ul><a href="#closure" style="color:#0000F0;font-weight: bold"> Qu'est-ce qu'une "closure"</a></ul>
        <ul><a href="#anonyme" style="color:#880000;font-weight: bold">Quelle est l'utilisation typique d'une fonction anonyme ?</a></ul>
        <ul><a href="#obj" style="color:#636363;font-weight: bold"> Quelle est la différence entre des objets hôtes et des objets natifs</a></ul>
        <ul><a href="#ca" style="color:#d17581;font-weight: bold">  Quelle est la différence entre .call et .apply ?</a></ul>
        <ul><a href="#bind" style="color:#0088CC;font-weight: bold"> Expliquez Function.prototype.bind</a></ul>
        <ul><a href="#docwr" style="color:#f6bf01;font-weight: bold"> document.write()</a></ul>
        <ul><a href="#hosting" style="color:#00ee00;font-weight: bold">HOSTING</a></ul>


        <p>***********************CORDOVA*********************</p>
        <ul><a href="#cordova" style="color:#00ee00;font-weight: bold">CORDOVA</a></ul>

        <p>************************NodeJS****************</p>
        <ul><a href="#nodejs" style="color:#f6bf01;font-weight: bold"> NodeJS</a></ul>
        <ul><a href="#bloquant" style="color:#0088CC;font-weight: bold"> Modéle bloquant et non bloquant</a></ul>
        <ul><a href="#installationnode" style="color:#3c763d;font-weight: bold"> Installation NodeJS</a></ul>
        <ul><a href="#rest" style="color:#f6bf01;font-weight: bold"> API REST</a></ul>


<p>****************************************************************</p>
        <ul><a href="#serious"# style="color:#f6bf01;font-weight: bold">Serious Game definiton</a></ul>
        <ul><a href="#multimedia" style="color:#761c19;font-weight: bold">Multimedia</a></ul>
        <ul><a href="#entreprise" style="color:#761c19;font-weight: bold">Quels sont les entreprises?</a></ul>
        <ul><a href="#ra" style="color:#761c19;font-weight: bold">réalité augmentée</a></ul>
        <ul><a href="#marqueur" style="color:#761c19;font-weight: bold">les marqueurs</a></ul>
        <ul><a href="#rv" style="color:#761c19;font-weight: bold">Realité virtuelle</a></ul>
        <ul><a href="#rm" style="color:#761c19;font-weight: bold">Realité MIXTE</a></ul>
        <ul><a href="#designpattern" style="color:#761c19;font-weight: bold">Quels sont les design pattern</a></ul>
        <ul><a href="#jvpyth" style="color:#761c19;font-weight: bold">Java ou Python? différence</a></ul>
        <ul><a href="#tp" style="color:#761c19;font-weight: bold">type primitif </a></ul>
        <ul><a href="#ccp" style="color:#761c19;font-weight: bold">Coorodoonnées cartesienne et polaires</a></ul>
        <ul><a href="#points" style="color:#761c19;font-weight: bold">distance entre 2 points</a></ul>
        <ul><a href="#classe" style="color:#761c19;font-weight: bold">Expliquez moi une classe</a></ul>
        <ul><a href="#framework" style="color:#761c19;font-weight: bold">Pourqoi on utilise les Frameworks? (Backbone, AngularJS, Symfony, Zend)</a></ul>
        <ul><a href="#code" style="color:#761c19;font-weight: bold">comment on peut ptimiser un code</a></ul>
        <ul><a href="#cyce" style="color:#761c19;font-weight: bold">Cycle de vie d'un logiciel</a></ul>

        <p>***********IOT*****************</p>
        <ul><a href="#code" style="color:#f6bf01;font-weight: bold">IOT</a></ul>



        <p>**************UNITY*******************</p>
        <ul><a href="#game" style="color:#761c19;font-weight: bold">difference entre gamification et jeux serieux</a></ul>
        <ul><a href="#optimiser" style="color:#761c19;font-weight: bold">Comment on peut optimiser de code sur unity</a></ul>
        <ul><a href="#component" style="color:#761c19;font-weight: bold">getComponent</a></ul>
        <ul><a href="#unity" style="color:#761c19;font-weight: bold">Unity</a></ul>
        <ul><a href="#mecanismes" style="color:#761c19;font-weight: bold">Mécanisme des jeux:</a></ul>
        <ul><a href="#jeux" style="color:#761c19;font-weight: bold">Quels sont les jeux que vous avez joué</a></ul>

    </li>
</section>
<p>************jeux serieux***</p>
<section id="serious">
    Les jeux sérieux comblent l’apprentissage et le jeu au meme temps.
    <p>Les catégories de Serious Game : </p>
    <p> Advergaming : Ces serious games se destinent principalement à la publicité. </p>
    <p>Edutainment: L'éducation par le jeu exemple: PILI POP, UNE APPLICATION POUR APPRENDRE L’ANGLAIS AUX ENFANTS
    </p>
    <p>Edumarketgame : Jeu combinant messages informatifs ou éducatifs avec une marque </p>
    <p>Jeux d’entraînement et simulation : Ces seriousgames ont pour vocation soit :<p>
         de permettre à l’utilisateur de s’entraîner à exécuter une tâche ou une manœuvre donnée </p>
    <p style="color: #0000F0"> Exemples de jeux</p>
    <p style="color: #0000F0">Serious Game sur android</p>
    <p>Monster School</p>
    <p>C'est une application regroupant de nombreux et variés puzzles d’éveil</p>
    <p>pour les plus petits (jeux de mémoire, de logique, de mathématiques…)</p>
    <p> WWF TOGETHER</p>
    <p>connaitre lesanimaux en voie de disparition </p>
    <p>éléphants, tigres, rhinocéros, ours polaire… </p>
    <p>Only in English</p>
    <p style="color: #0000F0">Serious Game en réalité augmentée</p>
    <p>INGRESS</p>
    <p>Transforme la ville en terrain de jeu</p>
    <p>Les équipes se lancent alors dans les rues avec des tablettes tactiles géolocalisées</p>
    <p>pour résoudre une série de défis personnalisés </p>
    <p>prendre des photos de situations données </p>
    <p>reproduire des scènes de films en vidéos</p>
    <p>retrouver des points de vue de cartes postales historique</p>
    <p>MARNE 1914</p>
    <p>Une application pour découvrir l’histoire de la Grande Guerre</p>
    <p>NEAREST TUBE </p>
    <p>Application IPhone permettant de trouver la station de métro la plus proche</p>

</section><a href="#up" style="color:#761c19;">UP</a>

<p>************multimedia******</p>
<section id="multimedia">
    <p>Processus de visualisation d’un objet 3D (pipeline graphique).</p>
    <p>Les méthodes qui permettent d’effacer des facettes cachés d’un objet 3D.</p>
    <p>Les algorithmes qui permettent de colorer notre objet virtuel selon la luminisation de la séne réelle (Z-buffer)</p>
    <p>->Le principe du Z-buer consiste à colorer le pixel avec la couleur de la face située le plus prés de l'œil</p>
    <p>Ombrages de Phong et de Gouraud. > déduire les composantes RVB de l’intensité lumineuse du pixel</p>
    <p>maillage 3d, facettes ....</p>
</section><a href="#up" style="color:#761c19;">UP</a>

<p>************mecanismes******</p>
<section id="mecanismes">
    <p>FPS : First Person Shooter</p>
   <p> Trois PS : Third Person Shooter</p>
    <p>RPG : Role Playing Games </p>
    <p>/ Les jeux de role (exple : Final Fantasy, Dragon Quest) il y a une stratégie dans les combats . les combats se déroulent en ordre.</p>
    <p>Interactive games</p>+
</section><a href="#up" style="color:#761c19;">UP</a>

<p>************jeux******</p>
<section id="jeux">
    <p>Oui, bon franchement pas trop </p>
    <p>pour etre honnete dernierement j'y joue pas trop </p>
    <p>parceque vous savez avec le cycle ingenieur avec les projets, </p>
    <p>avec les examens on a pas trop le temps de pense au jeux vidéos</p>
    <p>mais quand meme je jete un coup d'oeil de temps en temps sur l'actualité</p>
   <p>ou bien je m'amuse à faire une partie sur le telephone vite fait</p>
   <p>mais par contre pendant les vacances, quand je suis un peu libre</p>
   <p>je reinstalle des titres old school juste pour s'amuser</p>
    <p>j'adore Crazy taxi :D</p>
    <p>j'adore aussi tout ce qui est dans l'univers de GTA</p>
    <p>j'ai essayé la 5 sur PS4 et j'ai adoré</p>
    <p>c'est un très beau jeu</p>
    <p>Les graphismes sont impecables</p>
    <p>l'univers est infini</p>
    <p>les mecanismes sont tres souples</p>
    <p>ROckstar sont vraiment fort pour ca</p>
    <p>j'ai joué aussi à LIMBO, PokemonGO, Temple Run sur le telephone </p>
    <p>(Menez le garçon par des locations obscures pleines de plusieurs pièges et de dangers mortels.)</p>
    <p>j'ai joué aussi à Tekken</p>
    <p>(tekken:une série de jeux vidéo de combat en 3D)(playstation) </p>
    <p>derniere version: Tekken 7 </p>
    <p></p>

    <p>je rearde toujours mes amis jouent à Final fantasy, Dark Souls aussi</p>

    <p>Miguel continue à errer dans la ville ravagée par la guerre à la recherche des ceux qui ont tué sa soeur.</p>
</section><a href="#up" style="color:#761c19;">UP</a>


<p>************entreprises******</p>
<section id="entreprise">
digital manial
digital ink
</section><a href="#up" style="color:#761c19;">UP</a>

<p>************unity******</p>
<section id="unity">
    <p>Développeur:	Unity Technologies</p>
    <p>Dernière version	5.4.1 (8 septembre 2016)</p>
    <p>Écrit en	C, C++, C# et Python</p>
    <p> son logiciel de développement de script MonoDevelop,</p>
    <p>la licence gratuite « Personal » ;
        la licence payante « Plus » ;
        la licence payante « Pro » ;
        la licence payante « Enterprise »</p>
    <p>Liste de moteurs de jeux vidéo:</p>
    <p>Libres: Allegro, dim3, Panda3D, Ultimate 3D</p>
    <p>Propriétaires: Unity, Game Maker</p>
    <p>MONO DEVELOP</p>
</section><a href="#up" style="color:#761c19;">UP</a>

<p>************RA******</p>
<section id="ra">
<p>La RA est mise en œuvre, de manière générale, en 3 étapes principales :</p>
    <p>Détéction</p>
    <p>Tracking: le suivi en telmps réel</p>
    <p>Affichage RA</p>
</section><a href="#up" style="color:#761c19;">UP</a>

<p>************marqueurss******</p>
<section id="marqueur">
    <p>En réalité augmentée, l’interactivité se fait par l’intermédiaire de marqueurs permettant, via une caméra,
        de repositionner un objet virtuel dans un flux vidéo en temps réel.
        <p>Caractéristiques des marqueurs :</p>
        <p>Il ne faut pas avoir un nombre total de forme trop important, sinon il faudra ajouter plus de détails visuels dans l’image  </p>
    <p>Il faut que tous les éléments qui constituent l’image possèdent clairement un bord et un contraste élevé localement défini.  </p>
    <p>Il faut avoir un haut contraste avec les formes qui sont adjacentes à la forme prise en compte.</p>
</section><a href="#up" style="color:#761c19;">UP</a>

<p>************Realité virtuelle******</p>
<section id="rv">
    <p>La réalité virtuelle (en anglais, virtual reality ou VR)</p>
    <p>est une technologie qui permet de plonger une personne </p>
    <p>dans un monde artificiel créé numériquement.</p>
    <p>Il peut s'agir d'une reproduction du monde réel ou bien d'un univers totalement imaginaire.</p>
    <p>===>  transport direct vers un autre monde</p>
    <p>Les équipements</p>
    <p>premiere casque commercialisé dans le monde de la réalité virtuelle c</p>
    <p>oculus rift qui est acquise par Facebook mnt</p>
    <p> Google a proposé un modèle en carton baptisé Carboard </p>
    <p>qui s'utilise avec un smartphone en guise de système d'affichage.</p>
    <p>Samsung (Gear VR), HTC (HTC Vive), Sony (PlayStation VR) </p>
    <p>les fonctions de la RV</p>
    <p>la formation avec des simulateurs,</p>
    <p>le traitement de phobies </p>
    <p>simulation d'actes chirurgicaux </p>
    <p>architecture,  visites virtuelles de musées</p>
</section> <a href="#up" style="color:#761c19;">UP</a>

<p>************Realité mixte******</p>
<section id="rm">
    <p>la réalité mixte combine les caractéristiques des deux</p>
    <p>Comme pour la réalité augmentée</p>
    <p>l’utilisateur d’un casque de réalité mixte voit se superposer des informations digitales par-dessus son environnement.</p>
    <p>ou bien il peut simuler de véritables éléments vivants. </p>

</section> <a href="#up" style="color:#761c19;">UP</a>

<p>*******Design Pattern**************</p>
<section id="designpattern">
    <p>un patron de conception (plus souvent appelé design pattern) est un arrangement caractéristique de modules,</p>
        <p>reconnu comme bonne pratique en réponse à un problème de conception d'un logiciel.</p>
    <p>Il décrit une solution standard, utilisable dans la conception de différents logiciels</p>
    <img src="{{ asset('bundles/gestionfilms/entretien/design.png')}}" alt="">
<p>MVC: le modèle, la vue, le contrôleur </p>
   <p>repose sur la volonté de séparer les données, les traitements et la présentation.</p>
    <p>Le modèle représente le cœur (algorithmique) de l'application : traitements des données, interactions avec la base de données, etc.</p>
<p>La vue n'effectue pas de traitement, elle se contente d'afficher les résultats des traitements effectués par le modèle et d'interagir avec l'utilisateur.</p>
<p>Controleur: Par exemple, dans le cas d'une base de données gérant les emplois du temps des professeurs d'une école, une action de l'utilisateur peut être l'entrée (saisie) d'un nouveau cours. Le contrôleur ajoute ce cours au modèle et demande sa prise en compte par la vue. Une action de l'utilisateur peut aussi être de sélectionner une nouvelle personne pour visualiser tous ses cours. Ceci ne modifie pas la base des cours mais nécessite simplement que la vue s'adapte et offre à l'utilisateur une vision des cours de cette personne.</p>
<p style="color: #8959A8">Exemples d’architecture MVC</p>
    <p>En JavaScript: JavaScriptMVC, Backbone.js, AngularJS</p>
    <p>En Java: Spring MVC</p>
    <p>En PHP: Symfony</p>
</section> <a href="#up" style="color:#761c19;">UP</a>

<p>*******Expliquer classe**************</p>
<section id="classe">
    <p>Je m'explique : pour construire une maison, vous avez besoin d'un plan d'architecte non ? </p>
   <p>Eh bien imaginez simplement que la classe c'est le plan et que l'objet c'est la maison.</p>

   <p>« Créer une classe », c'est donc dessiner les plans de l'objet.</p>
</section> <a href="#up" style="color:#761c19;">UP</a>

<p>******* PK Framework?? **************</p>
<section id="framework">
    <p>ils sont soit disant utilisés pour faciliter la programmation de nos sites web avec des lots de classes</p>
    <p>ou bien fonctions toutes prêtes à l'emploi.</p>
    <p style="color: #8959A8">Pk SYMFONY??</p>
    <p>Un truc qui me plait bien c'est la transparence du SGBD que tu utilise (grâce à Doctrine).</p>
    <p>Le but c'est de coder plus vite des gros projets de manière standard. </p>
    <p>C'est à dire que n'importe qui qui connait symfony sera opérationnel comme développeur pour ton site.</p>
    <p>tu peux ne pas développer à chaque fois des formulaires pour entrer des données etc</p>
    <p>tu peux générer un code SQL pour n'importe quel SGBQ juste en déclarant</p>
    <p>la structure de tes tables aussi rapidement qu'avec symfony</p>

</section> <a href="#up" style="color:#761c19;">UP</a>

<p>******* OPTIMISER CODE**************</p>
<section id="code">
    <p style="color:#e74c3c;">1.Répartir le code source</p>
    <p>il est possible de séparer le code principal en plusieurs "sous-programmes". Il suffit de les inclure dans le programme "principal"</p>
<p>C'est juste pour une meilleur organisation !</p>
    <p>Cette technique n'optimisera donc en rien du programme, mais vous fera gagner beaucoup de temps.</p>
    <p style="color:#e74c3c;">2.Pré-calculer des grosses valeurs</p>
    <p>si vous utilisez à plusieurs endroit un même calcul, il est très souvent avantageux de stocker d'abord le résultat puis de l'utiliser,</p>
    <p>au lieu de faire le même calcul à chaque fois. </p>
    <p>Exemple boucle qui calcule chaque fois une  valeur, on peut mettre l'instruction au dessus dé la boucle</p>
    <p style="color:#e74c3c;">3. Utiliser le moins de commandes différentes possible</p>
    <p style="color:#e74c3c;">4. Booster les tests</p>
    <p>Exemple au lieu d'écrire "If A=0" on peut écrire "!If A"</p>
    <p>ou bien "If A=B" on peut l'écrire "!If A-B"</p>
    <p>aussi au lieu d'ecrire and on peut ecrire + cela peut économise 7 octets</p>
    <p style="color:#e74c3c;">5. Optimiser un commande </p>
    <p>par exemple au lieu d'écrire </p>
    <p>"Rect(0,0,8,8)" on écrit "Rect(0,,8,)"</p>
    <p>parceque la commande rect ne regarde pas ce qu'on lui propose, elle regarde ce qu'il y a dans le registre HL</p>
</section> <a href="#up" style="color:#761c19;">UP</a>

<p>******* HTML 5**************</p>
<section id="html5">
    <p>208</p>
    <p>HypertextMarkupLanguage</p>
    <p>HTML est initialement dérivé du SGML(Standard Generalized MarkupLanguage) dont la première publication date de 1986</p>
    <p>C’est un langage de balisage: "balise" Contenu "balise"</p>

    <p>les langages HTML 4 et autres XHTML se focalisaient juste sur le contenu des pages Web,</p>
    <p>le HTML5 se focalise sur les applications Web et l'interactivité,</p>
    <p>sans toutefois délaisser l'accessibilité et la sémantique</p>
    <p>il se également comme concurrent des technologies Flash et Silverlight !</p>
    <p style="color:#0000F0;">Accessibilité et sémantique</p>
    <>Le HTML5 apporte des nouveaux éléments comme "nav", "header", "article", "figure"… qui améliorent l'accessibilité,</p>
    <p>ainsi que des éléments comme "mark" ou "data" qui améliorent la sémantique (c'est-à-dire le sens qu'on donne aux textes)</p>
    <p style="color:#0000F0;">Applications Web et interactivité</p>
    <p> Le HTML5 apporte de nombreux éléments comme "video", "datagrid", "meter", "progress", "output"</p>
    <p>… ainsi que de nouveaux types pour les éléments input, comme tel, url, date, number…</p>
    <p>Le HTML5 spécifie aussi un certain nombre d'API JavaScript. </p>
</section><a href="#up" style="color:#761c19;">UP</a>


<p>******* LES BALISES**************</p>
<section id="balise">
    <p>Les balises Block:  Elles englobent le contenu. Elles contiennent des paragraphes, des titres, etc.
    </p>
    <p>Les balises «inline» : Elles sont dans le texte. (mettre en gras, souligner, etc…)</p>

</section><a href="#up" style="color:#761c19;">UP</a>

<p>******* LES BALISES META**************</p>
<section id="meta">
    <p>Ils permettent de renseigner diverses informations sur la page en cours,
        comme son auteur,une courte description du document,desmots-clefs,etc
    </p>
    <p>Exple: la meta author</p>
    <p>metakeywords: Contient un eliste de mots-clefs sur lesquels les moteurs de recherche vont se référer</p>
    <p>metacategory: Contient une liste de mots qui décrivent la catégorie de la page</p>
    <p>metalanguage: Langue de la page sous la forme d'une abréviation</p>
    <p>metaRefresh. Permet de : •Recharger (réactualiser) automatiquement la page toutes les n secondes. ou bien
        Rediriger automatiquement le navigateur vers une autre page au bout de n secondes </p>

</section><a href="#up" style="color:#761c19;">UP</a>


<p>******* LES LISTES**************</p>
<section id="listes">
    <p>UL:  Liste non triée,   liste à puces,</p>
    <p>OL: Liste triée, liste à numéros </p>
    <p>DL:  Liste des définitions </p>

</section><a href="#up" style="color:#761c19;">UP</a>

<p>****LES TABLEAUX*************</p>
<section id="tableau">
<p>
    Tableau : table</p>
<p>Ligne : tr</p>
<p>Cellule : td</p>
    <p>Cellule d’en-tête : th</p>
<p> Extension de cellule sur Lignes : td rowspan="L"</p>
<p>Extension de cellule sur C colonnes : td colspan="C"</p>
</section><a href="#up" style="color:#761c19;">UP</a>

<p>****LES BALISES SEMANTIQUES*************</p>
<section id="sem">
    <p>HEADER</p>
    <p>FOOTER</p>
    <p>NAV: regroupe tous les principaux liens de navigation du site. on y place par exemple le menu principal
        du site.</p>
    <p>ARTICLE : C’est une spécialisation de section vise à baliser des blocs de contenu
        utiles que l'on pourrait extraire du document tout en conservant leur
        sens et leurs informations.
        </p>
    <p>SECTION: C'est la plus générique
        La section regroupe un ensemble de contenu d'une même
        thématique, </p>
    <p>ASIDE: Contient des informations complémentaires au document que l'on
        visualise
    </p>
</section><a href="#up" style="color:#761c19;">UP</a>




<p>******* DOCTYPE**************</p>
<section id="doctype">
    <p>Syntaxe: !DOCTYPE html</p>
    <p>Ce n'est pas une balise html a proprement parler mais un indicateur qui permet</p>
    <p>au navigateur de savoir quelle "langage", "grammaire", ou norme on applique à notre page</p>
    <p>il permet toujours - pour les anciens navigateurs - de rester dans le mode d'interprétation </p>
    <p>conforme aux standards du W3C(World Wide Web Consortium)  qui vérifie que notre code HTML ne comporte
        aucune erreur de syntaxe (balises mal fermées, utilisation d'attributs inexistants...)</p>
    <p>et d'éviter le mode quirks.</p>
    <p>D'autre part, il indique au navigateur de quelle manière interpréter telle balise, telle propriété CSS</p>
    <p style="color: #1b6d85" >Et l URL sur la ligne du DOCTYPE, est-elle vraiment utile, elle ?</p>
    <p>oui. Vous pouvez certes faire valider vos pages sur le site du validateur du W3 sans l'URL</p>
    <p>mais son oubli a la fâcheuse tendance à faire passer Internet Explorer en mode Quirks, </p>
    <p>ce qui anéantira tous vos efforts de compatibilité entre les différents navigateurs.</p>
    <p style="color: #c7254e">Doctype HTML 4.01</p>
        !DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"
    <p style="color: #c7254e">  Doctype XHTML 1.1</p>
        !DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN
        "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
    <p style="color: #c7254e"> Doctype HTML 5</p>
      <p>  !DOCTYPE html</p>
    <p>SGML: langage de balisage généralisé normalisé</p>
</section><a href="#up" style="color:#761c19;">UP</a>

<p>******* LES MODES HTML STANDARD ET QUIRCKS**************</p>
<section id="modehtml">
    <p>L'absence de la balise doctype est appelée le mode Quirks ou bien non conforme</p>
    <p>et la présence de la balise doctype est appelée le mode Standard, ou conforme</p>
    <p>Quand on ajoute un doctype le layout change de facon inattendue </p>
    <p> la difference consiste aux règles d’affichage différentes qui seront appliquées au fichier</p>
    <p>la première se conformant à une interprétation du comportement attendu conforme aux
        standards du W3C,</p>
    <p>la seconde se conformant à d’autres attentes basées sur le comportement non
        standard des anciens navigateurs.</p>

</section><a href="#up" style="color:#761c19;">UP</a>

<p>******* HTML et XHTML**************</p>
<section id="xhtml">
<p>XHTML 1.0 est une transposition en syntaxe XML de HTML 4</p>
    <p>Il s'agit en fait d'une reformulation plus rigoureuse du HTML.</p>
    <p>Seule la syntaxe change, les fonctionnalités sont les mêmes.</p>
</section><a href="#up" style="color:#761c19;">UP</a>
<p>******* Content-Type application/xhtml+xml ?*************</p>
<section id="contenttype">
<p>Le XHTML devrait toujours avoir application/xhtml+xml pour type MIME. </p>
    <p>Car il s'agit bien d'une application XML</p>
<p> Malheureusement, la plupart des navigateurs n'ont pas la moindre idée de ce que c'est. </p>
    <p>Donc, on tolère généralement sans trop de problèmes le type MIME text/html.</p>
    <p>les variations du XHTML 1.0 peuvent être utilisées avec le text/html mais pas le XHTML 1.1. </p>
</section><a href="#up" style="color:#761c19;">UP</a>

<p>******* Page MULTILINGUE*************</p>
<section id="multilingue">
    <p>Il y a gettext en PHP qui est fait pour ce genre de choses.</p>
</section><a href="#up" style="color:#761c19;">UP</a>

<p>******* atribut -data*************</p>
<section id="data">
    <p>data-* permet d'associer des données quelconques dans un élément HTML à l'aide des attributs .</p>
    <p>par exemple Il ne serait pas possible d'écrire : img src="photo.jpg" auteur="Simon" date="15 février 2012"
        pour ajouter des informations, car ce n'est pas valide.</p>
    <p>donc data  permet de stocker arbitrairement des données</p>
    <p> C'est par exemple le cas de alt pour une image, ou de rel et title.</p>
    <p>On peut ainsi personnaliser la famille d'attributs débutant par data- </p>
    <p>en y concaténant une chaine de texte</p>
    <p>il faut mettre au moins un caractère et aucune majuscule. </p>

</section><a href="#up" style="color:#761c19;">UP</a>

<p>******* STORAGE*************</p>

<section id="storage">
    <p>La fonctionnalité storage est une nouveauté HTML5,</p>
    <p>Ce procédé va permettre de simplifier le processus de sauvegarde</p>
    <p>et de persistance des données.</p>
    <p> dans une "base de données" coté client (c'est a dire au niveau du navigateur).</p>
    <p>Pour le sessionStorage: </p>
    <p>On peut gérer des données par session </p>
    <p>il mémorise les données sur la durée d'une session de navigation</p>
    <p>et sa portée est limitée à la fenêtre ou l'onglet actif. </p>
    <p>Lors de sa fermeture, les données sont effacées.</p>
    <p>Contrairement au cookies,  il n'y a pas d'interférence</p>
    <p> Chaque stockage de session est limité à un domaine.</p>
    <p>Exmple: si vous avez 2 fenêtres sur le même site, une action sur le sessionStorage sera répercutée sur l'autre).</p>
    <p>et pour le localStorage: mémorise les données sans limite de durée de vie. </p>
    <p>Contrairement à sessionStorage, elles ne sont pas effacées lors de la fermeture d'un onglet ou du navigateur. </p>
    <p>Le storage a pour but de limter la taille des cookies</p>
    <p>//4 ko pour les cookies et jusqu'à 10Mo pour le storage!</p>
    <p>La différence entre les deux se trouve dans la durée de stockage des données.</p>
    <p>sessionStorage persiste le temps d'une session de navigation.</p>
    <p>Ouvrir une nouvelle fenêtre ou un nouvel onglet, initialisera donc un nouvel objet. </p>
    <p>On pourrait donc utiliser sessionStorage pour un formulaire multi-pages, </p>
    <p>et conserver de l'information d'une page à l'autre.</p>
    <p>localStorage, quant à lui, conserve les données pour une durée indéterminée.</p>

    <p> Et pour les COOKIES </p>
    <p>Ce sont des fichiers simples enregistré sur le disque dur de l'ordinateur</p>
    <p> Il contient des informations sur la navigation effectuée sur les pages d'un site.</p>
    <p> il permet de faciliter l'utilisation ultérieure du site par la même personne.</p>
    <p>Exemple Ainsi, si Myriam revient sur un site où elle aura rempli un formulaire avec ses nom et prénom, </p>
    <p>elle sera accueillie par un « Bonjour Myriam ». </p>
    <p>aussi un cookie sert à reprendre les préférences choisies par un utilisateur lors de la visite</p>
    <p>ca sert beaucoup dans la publicité</p>
    <p>par exemple quand un internaute affiche la page d'un site,</p>
    <p>un cookie indique au serveur de cette régie les dernières recherches effectuées par la personne.</p>
    <p>Si elle s'est beaucoup intéressée, récemment, aux parfums, </p>
    <p>elle verra s'afficher des publicités des parfums.</p>

</section><a href="#up" style="color:#761c19;">UP</a>

<p>******* SCRIPT*************</p>

<section id="script">
    <p>SCRIPT</p>
    <p> L'analyse du code HTML est mise en pause le temps que le script soit exécuté.</p>
    <p> si on a des serveurs lents et des scripts lourds, l'affichage de la page va mettre du temps.</p>

    <p>SCRIPT ASYNC</p>
    <p>  le script pourra être exécuté de façon asynchrone dès qu'il sera disponible </p>
    <p>Le code JavaScript sera exécuté aussitôt qu'il sera disponible. </p>
    <p>On peut les mettres quand on ne donne aucune importance de savoir quand le script sera disponible </p>

    <p>SCRIPT DEFER</p>
    <p>Il signifie que le navigateur peut charger le script en parallèle, sans stopper le rendu de la page HTML.</p>
    <p>cela revient à executer les scripts dans l'ordre où ils ont été rencontrés mais seulement à la fin de l'analyse HTML. </p>
    <p>D’un point de vue latence et performance ces attributs se comportent de façon similaire. Ils demandent au navigateur d'éxécuter
        les scripts seulement après avoir téléchargé l’intégralité du contenu de la page.</p>
</section><a href="#up" style="color:#761c19;">UP</a>

<p>******* LINK*************</p>

<section id="link">
    <p>L'élément "LINK" est utilisé pour relier les feuilles de style externes:</p>
    <p> Le standard (HTML4 ou HTML5) indique que les éléments link sont situés dans l'élément head,</p>
    <p>parceque là où on attend des métadonnées. Et "head" est le seul cité  qui accepte des métadonnées comme contenu.</p>
    <p>c'est  pour cela on met les feuilles de style en <head>, pour avoir le document "décoré" tout de suite</p>
    <p>et pas que l'utilisateur voit un texte noir et blanc dégueu jusqu'à ce que le chargement de la page soit fini.</p>
    <p>pour la balise script on la met avant /body</p>
    <p>bon c'est une qestion de performance</p>
    <p>Le traitement d'une page web par un navigateur est séquentiel, de haut en bas.</p>
    <p>donc Placer les scripts au plus bas permet de charger les éléments importants de la page web </p>
    <p> avant de s'occuper des paillettes que représente le script</p>
   <p>on ne met pas les scripts dans le head parceque les script peut modifier le contenu de la page</p>
    <p>par exemple document.write  peut changer le document avant-même que celui ait fini d'être chargé.</p>
    <p></p>
</section><a href="#up" style="color:#761c19;">UP</a>

<p>******* RENDU PROGRESSIF*************</p>

<section id="progressif">
    <p>le rendu progressif rend l'exécution d'une partie du code avant le transfert de la totalité de la page possible </p>
    <p>(ce n'est pas le cas pour XHTML)</p>
   <p>par exemple pour une image: une version ébauchée de l'image est d'abord envoyée,</p>
    <p>puis affinée petit à petit jusqu'à obtenir l'image originale.</p>
</section><a href="#up" style="color:#761c19;">UP</a>

<p>******* MOTIVATION DEVELOPPEMENT *************</p>

<section id="motive">
    <p>Programmer est, sans aucun doute, la chose la plus gratifiante intellectuellement que j’ai jamais réalisée.</p>
    <p>Programmer m’a appris que la vie se devait d’être amusante, remplie de créativité</p>
    <p>Developper m’a appris que tout était possible </p>
    <p>je peux faire ce qui me plait en utilisant seulement mon esprit.</p>
</section><a href="#up" style="color:#761c19;">UP</a>

<p>******* DEFIS TECHNIQUES *************</p>

<section id="defi">
    <p>j'ai eu des defis l'année derniere quand notre professeur nous a ammené à développer un site en SYMFONY </p>
    <p>J'ai été encore débutante dans ce domaine là et j'ai aussi le projet de fin d'annee à réaliser (application)</p>
    <p>donc le defi c'etait de développer un site web en symfony et au meme temps developper une application en réalité augmentée</p>
    <p>deux domaines différents et donc j'ai lit beaucoup sur ces domaines là et j'ai suivi des tuto afin que je puisse faire un travail représentable</p>
</section><a href="#up" style="color:#761c19;">UP</a>

<p>*******CONSIDERATIONS *************</p>

<section id="considerations">
    <p style="color: #8959A8">consideration UI </p>
    <p>***Un site bien rangé</p>
    <p>Pour qu’un internaute se sente à l’aise, il faut qu’il y trouve ce qu’il est venu y chercher</p>
    <p>Cet objectif ne sera atteint que si les informations sont bien rangées dans le site</p>
    <p>de telle manière que les visiteurs ne s’y perdent pas.</p>
    <p>il fautt faire appel à un travail de catégorisation (créez des groupes de contenu) puis de structuration (hiérarchiser le contenu).</p>
    <p>****Organisation visuelle : faire le ménage dans les pages</p>
    <p>càd la page doit étre organisée</p>
    <p>il faut: </p>
    <p>Éviter l’embouteillage d’informations</p>
    <p> ne jamais surcharger les pages d’informations inutiles</p>
    <p>et se focaliser sur l’essentiel.</p>
    <p>*****Cohérence : Capitaliser l’apprentissage interne du site</p>
    <p>Les utilisateurs quand ils naviguent sur un site </p>
    <p>ils vont se forger un modèle mental solide sur la façon avec laquelle naviguer. </p>
    <p>donc il faut préserver au maximum cette cohérence pour</p>
    <p>ne pas perturber l’expérience d’utilisation de vos internautes </p>
    <p>et pou rendre la navigation plus efficiente d’une autre part.</p>
    <p>Par exemple il faut préserver la localisation et le positionnement des éléments. </p>

    <p style="color: #8959A8">Considération coté securité </p>
    <p>il faut s’assurer de la sécurité pour empêcher les attaques des pirates pour le site web.</p>
    <p>***********donc il faut tout d'abord  assurer la Sécurité physique</p>
    <p>parceque il ne sert à rien de sécuriser l'ensemble de vos services si les ordinateurs sous-jacents</p>
    <p>ne sont pas eux-mêmes protégés. </p>
    <p>il faut prendre en compte de savoir qui a l'acces à la salle des machines </p>
    <p> faire une surveillance des accès</p>
    <p>********et coté développement</p>
    <p>Trop souvent, les données externes sont utilisées sans vérifications préalables </p>
    <p>et il est possible de subvertir l'appel d'une commande pour qu'il en résulte une autre,</p>
    <p>simplement en fournissant une valeur inattendue</p>
    <p>Il est donc indispensable de mettre à jour les applications web régulièrement </p>
    <p>pour ne pas rester vulnérable au premier pirate (amateur ou pas) qui cherchera à exploiter les failles </p>
    <p>Exemple </p>
    <p>Lorsqu'un programme exécutant des requêtes SQL, y insère des paramètres d'une manière non sécurisée,
    il peut être victime d'injections SQL. Il s'agit de modifier le paramètre de manière à ce que le programme exécute
        en réalité une version altérée de la requête SQL,
        soit pour endommager les données,
        soit pour récupérer des données auxquelles l'utilisateur ne devait pas avoir accès.</p>
    <p>Il faut aussi mettre des modules dans l'application web qui permettent de filtrer les requêtes HTTP entrantes.</p>
    <p>donc bloquer certains vecteurs d'attaques </p>
    <p>exemple : empêcher les dépassements de tampon en limitant la longueur de certains paramètres</p>
    <p > *******Bien choisir les logiciels</p>
    <p>parceque Plus un logiciel dispose de fonctionnalités intégrées, plus le risque est grand qu'une faille se cache quelque part dans le code.</p>
<p>******* il faut aussi configurer un pare-feu qui n'autorise l'accès qu'aux services qui doivent être accessibles au public.</p>
<p style="color:#8959a8;">coté performance</p>
    <p> La mise en cache améliore les performances et réduit la latence</p>
    <p> parcequ'elle permet d'Optimiser l'accès à des données de référence</p>
    <p>et Éviter des allées/retour sur le réseau </p>
    <p>il faut aussi Mettre en cache les données en format prêt pour l'utilisation</p>
    <p> aussi vérification de tout ce qui est
        rentré par l'utilisateur  côté client permet d'augmenter la performance</p>
    <p>soigner le SEO de l'application web </p>
    <p>car elle apparaît dans les résultats de recherche des moteurs comme Google ou Yahoo,</p>
    <p>surtout depuis la récente mise à jour de l’algorithme de Google.</p>

    <p style="color:#8959a8;">SEO</p>
    <p>Search Engine Optimization</p>
    <p>Qui dit SEO, dit moteur de recherche, mais surtout optimiser son site pour ses utilisateurs. </p>
<p>donc on a besoin de spécifier et structurer un plan qui sera aussi facile pour un moteur de recherche que pour nos usagers de s'y orienter et trouver son contenu.</p>
<p>il faut utiliser les balises qui permet de définir le contenu du site; schema,org, hreflang, rel=next\prev, rel=canonical, etc.</p>
    <p>Donc Dans toute conception de site web, il est primordial d'impliquer son spécialiste SEO en début de projet</p>
    <p style="color:#8959a8;">Technologie</p>
    <p>Il faut aussi bien choisir la technologie, cela dépend de l'application, de ses besoins, </p>
    <p>du cahier des charges en quelque sorte. </p>
</section><a href="#up" style="color:#761c19;">UP</a>

<p>*******Gestion des versions *************</p>

<section id="gestionversions">
    <p>//c est un logiciel qui permet de stocker un ensemble de fichiers en conservant la chronologie de toutes les modifications.
        qui ont été effectuées dessus. </p>
    <p>J'utilise Git</p>
    <p>si le fichier est modifié, les deux versions sont stockées sur le disque.</p>
</section><a href="#up" style="color:#761c19;">UP</a>

<p>*******WORKFLOW*************</p>

<section id="workflow">
<p>1. créer la cahier de charge tout d'abord </p>
    <p>qui regroupe les informations à prendre en compte pour la création graphique, technique et dans la stratégie marketing. </p>
    <p>aussi créer les diagrammes UML</p>

<p>2. regrouper la matière première :</p>
<p> faire les Logo, charte graphique</p>
<p> si par exemple on développe un site d'une antreprise: il est important de comprendre l’entreprise pour la mettre en valeur sur le site</p>
<p>il faut collecter les informations sur les produits ou les services proposés</p>
<p> et développer</p>
</section><a href="#up" style="color:#761c19;">UP</a>

<p>*******AMELIORATION PROGRESSIVE*************</p>

<section id="apdg">
    <p>Ces deux méthodes ont un même but, rendre le contenu accessible au plus grand nombre</p>
    <p>l'amélioration progressive : </p>
    <p>elle consiste à créer d'abord des fichiers compréhensibles et interprétables par tous les navigateurs,</p>
    <p>pour ensuite y ajouter des améliorations visuelles et/ou sémantiques pour tous les navigateurs qui peuvent les comprendre. </p>
    <p>Il s'agit donc de créer des pages web "basiques" qui seront par la suite agrémenter de nouveaux éléments.</p>
    <p>c une approche qui est dite approche par couche ;</p>
    <p>les couches sont développées de la plus basique et la plus universelle à la plus spécifique, </p>
       <p> couche sémantique (XHTML, XML) :</p>
       <p> couche visuelle (CSS) :</p>
        <p>couche événementielle (JavaScript, AJAX) :</p>

    <p>***Dégradation élégante</p>
<p>c  est le plus vieux des deux concepts</p>
    <p>c est une technique par laquelle, on s'applique d'abord à créer des fonctionnalités pour les "meilleurs" des navigateurs,</p>
    <p>ceux capables de supporter la quasi-totalité de la solution envisagée.</p>
    <p></p>Puis, elle consiste à ensuite prendre en considération les plus anciens navigateurs,</p>

</section><a href="#up" style="color:#761c19;">UP</a>

<p>*******PERFORMANCE coté ASSET et RESSOURCES*************</p>

<section id="perfo">

    <p>****Réduire le poids des pages.</p>
    <p>->Minifier le code </p>
   <p> Réduire le nombre de requêtes http, et donc la latence.</p>
    <p>***</p>
    <p> la compression des fichiers et les en-têtes de cache.</p>
    <p>De la même manière que nous zippons nos pièces jointes envoyées par email,</p>
    <p>le serveur peut compresser les fichiers avant de les envoyer au navigateur.</p>
    <p>Pour préserver la bande passante des utilisateurs mobiles,</p>
    <p>il est capital de réduire le plus possible la taille du site web.</p>
     <p> donc on peut Activer la librairie de compression pour Apache mod_deflate pour la compression Gzip des fichiers</p>
    <p>*****</p>
    <p>Mettre les ressources en cache</p>
    <p>nous pouvons télécharger les ressources statiques en une seule fois, et les mettre en cache sur l’appareil.</p>
<p>la concaténation des fichiers </p>
    <p>->. Par exemple : au lieu de télécharger 10 fichiers JavaScripts qui demandent 10 requêtes http au serveur,
        les utilisateurs devraient télécharger seulement 4 fichiers qui représentent la combinaison de ces 10 fichiers</p>
    <p>*****Optimisation des images</p>
    <p>->il faut choisir le format adapté
        <p>.png pour les aplats de couleurs, .jpg pour les photographies</p>
    <p>***utiliser defer, async, et localStorage comme cache navigateu</p>
</section><a href="#up" style="color:#761c19;">UP</a>

<p>*******OUTIL PERFORMANCE*************</p>

<section id="tcp">
    <p>GTmetrix, Pingdom </p>
</section><a href="#up" style="color:#761c19;">UP</a>

<p>*******JS*************</p>

<section id="js">
    <p>inventé en 1995 par Brendan Eich,</p>
    <p>derbiere version ES5, introduite en 2009</p>
    <p>Le type nombre et le type chaine</p>
    <p>Affichage d'une valeur: console.log("bjr")</p>
    <p>Déclarer une variable: var a -> si on l'affiche: </p> <p style="color:#c7254e;">undefined</p>
    <p>incrélentation: b += 1; ====== b++; </p>
    <p>En cas d'échec de la conversion d'un nombre, la valeur du résultat est:</p>
    <p style="color:#c7254e;">NaN</p>
    <p>Number() et String() convertissent respectivement en un nombre et une chaîne la valeur placée entre parenthèses.</p>
    <p>var prenom = prompt("Entrez votre prénom :");
    alert("Bonjour, " + prenom);</p>
    <p>alert = console.log</p>
    <p style="color:#c7254e;">prompt renvoie toujours une chaine</p>
    <p>longueur d'une chaine: "a".length</p>
    <p>convertit en miniscule: motInitial.toLowerCase() // toUpperCase();</p>
    <p>Comparasion de deux chaines:  la présence de majuscules ou de minuscules dans les chaînes intervient dans le résultat de leur comparaison.</p>
<p>Accéder à un caractére à partir de son indice: mot.charAt(0) ou bien mot[0]</p>
    <p style="color:#c7254e;">Créer un objet littéral:</p>
    <p>var stylo = {
        type: "bille",
        couleur: "bleu",
        marque: "Bic",

        decrire: function () {}
        };</p>
    <p style="color:#c7254e;">Créer un objet à l'aide d'un constructeur: </p>
    <p>function obj(){} var monobj = new obj()</p>
    <p style="color:#c7254e;">This :</p>
    <p>représente l'objet sur lequel une méthode a été appelée</p>
    <p style="color:#c7254e;">prototype: </p>
    <p>Le modèle objet de JavaScript se base sur des prototypes pour créer des
        modèles et partager des propriétés entre plusieurs objets.
        Chaque objet a un prototype et une propriété absente d'un objet sera recherchée dans la chaîne de ses prototypes.</p>
    <p style="color:#c7254e;">réference: </p>
    <p>Il s'agit d'un lien vers un autre objet. </p>
    <p>// Crée unAutreObjet avec unObjet comme prototype
        var unAutreObjet = Object.create(unObjet);</p>
    <p style="color:#c7254e;">délégation</p>
    <p>Ce mode de relation entre les objets JavaScript est appelé délégation :</p>
    <p>un objet délègue une partie de son fonctionnement à son prototype.</p>

    <p style="color:#c7254e;">déclarer un tableau:</p>
    <p>var films = ["Le loup de Wall Street", "Vice-Versa", "Babysitting"];</p>
    <p>Avec JavaScript, on peut stocker dans un tableau des éléments de différents types, comme dans l'exemple ci-dessous.</p>
    <p style="color:#c7254e;">Parcourir un tableau: </p>
    <p>on utilise la fonction forEach: films.forEach(function (film) {
        console.log(film);
        });</p>
    <p>Ajouter un élément dans un tableau: films.push("XX")</p>

</section><a href="#up" style="color:#761c19;">UP</a>

<p>*******THIS*************</p>

<section id="this">
    <p>En JavaScript this se rapporte toujours au « propriétaire » de la fonction que nous exécutons, ou plutôt, à l'objet dont la fonction est une méthode. </p>
</section><a href="#up" style="color:#761c19;">UP</a>



<p>*******NULL*************</p>

<section id="nun">
    <p>>Déclarer une variable: var a -> si on l'affiche: undefined</p>
    <p>Les methodes DOM: getElementById(), nextSibling(), childNodes[n], parentNode()  return null </p>
    <p>il sontt définies mains il n'nt pas une valeur quand l'appel ne retourne pas un objet</p>

</section><a href="#up" style="color:#761c19;">UP</a>

<p>*******CLOSURE*************</p>

<section id="closure">
    <p>Le principe d'une variable est que sa valeur peut varier d'un instant à l'autre, </p>
    <p>mais il arrive que l'on ait besoin de conserver cette valeur telle qu'elle est à un moment donné pour l'utiliser plus tard.</p>
    <p>En utilisant une closure, on va conserver la valeur d'une variable de telle sorte qu'elle ne soit plus accessible en passant par la variable qui la contenait à l'origine.
</section><a href="#up" style="color:#761c19;">UP</a>

<p>*******ANONYME*************</p>

<section id="anonyme">
<p>ces fonctions spéciales sont anonymes car elles ne possèdent pas de nom</p>
    <p>pour exécuter cette fonction on peut l'assigner à une variable et l'appler par le nom du variable</p>
</section><a href="#up" style="color:#761c19;">UP</a>

<p>*******HOTES et NATIFS*************</p>
<section id="obj">
<p>obj hôtes: les objets definis par le navigateur
    Ex : HTMLElement, créé par le navigateur qui embarque l'interprète JS</p>
<p>les objets natifs :objets prédéfinis dans le langage
    Ex : tableaux, dates, expressions régulières, … var a= new Object();</p>
</section><a href="#up" style="color:#761c19;">UP</a>

<p>*******CALL et APPLY*************</p>
<section id="ca">
theFunction.apply(valueForThis, arrayOfArgs)

theFunction.call(valueForThis, arg1, arg2, ...)
</section><a href="#up" style="color:#761c19;">UP</a>

<p>********JQUERY*********</p>
<section id="jquery">
    <p>jQuery est une bibliothèque JavaScript libre et multi-plateforme créée pour faciliter
        l'écriture de scripts côté client dans le code HTML des pages web3</p>
</section>
<p>*******BIND*************</p>
<section id="bind">
    <p>elle permet de définir explicitement le contexte associé à this.</p>
</section><a href="#up" style="color:#761c19;">UP</a>

<p>*******DOCUMENT.WRITE*************</p>
<section id="docwr">
    <p> Écrit un flux de texte dans un document ouvert par document.open() ..</p>
    <p>document.write(text): text peut être une chaîne de caractères classiques, du code HTML et même du javascript.</p>
    <p>Exemple Créer un tableau HTML en javascript</p>
</section><a href="#up" style="color:#761c19;">UP</a>

<p>*******AJAX*************</p>
<section id="ajax">
    <p> Asynchronous JavaScript and XML</p>
    <p>c un ensemble de technologies destinées à réaliser de rapides mises à jour du contenu d'une page Web,
        sans qu'elles nécessitent le moindre rechargement visible par l'utilisateur de la page Web.</p>
    <p>Le transfert de données est géré exclusivement par le JavaScript, et utilise certaines technologies de formatage de données, comme le XML ou le JSON, mais cela s'arrête là.</p>
</section><a href="#up" style="color:#761c19;">UP</a>

<p>*******HOSTING********</p>
<section id="hosting">
    c le fait de déclaarer les variables au début d'une fonction
</section><a href="#up" style="color:#761c19;">UP</a>

<p>*******ANGULAR JS********</p>
<section id="angjs">
    <p>AngularJS est né en 2009 dans les locaux de Google</p>
    <p>framework qui permer de faciliter le développements front-end </p>
</section><a href="#up" style="color:#761c19;">UP</a>


<p>*******CORDOVA********</p>
<section id="cordova">
    <p>C un framework de développement hybride mobile gratuit et open source </p>
    <p>développé en 2009 par la société Nitobi software et puis le projet a été repris par adobe</p>
    <p>une application hybride c une  application qui a été développé par css html et js</p>
    <p>donc cordova permet d'encapsuler le code web dans un webview natif et d'offrir un API permettant d'exploiter</p>
    <p>les fonctionnalités natives du dispositif mobile</p>
    <p style="color:#0088CC;">INSTALLATION</p>
    <p>1. installer node.js: il sagit d'une plateforme logiciel libre en JS</p>
    <p>qui permet d'installer des paquetages npm</p>
    <p>et donc cordova est offert sous forme d'un paquetage node.js</p>
    <p>2. puis installer apache cordova</p>
</section><a href="#up" style="color:#761c19;">UP</a>

<p>*******IOT********</p>
<section id="iot">
    <P>La technologie de la voiture connectée moderne fait plus que simplement améliorer la communication et de commodité,</p>
    <p>il est en train de révolutionner l'industrie et de fournir une nouvelle frontière </p>
    <p>pour invention qui transforme la façon dont nous vivons et voyageons!</p>
    <p>augmenter la congestion du trafic, les technologies de la ville intelligente, la nouvelle législation sur les émissions de CO2 émergents</p>
    <p>et l'augmentation des prix du carburant se déplacent les paradigmes traditionnels de transport à travers le monde.</p>
    <p>Exemple: : Google développe sa Google Car, Apple construit son projet Titan, alors que Tesla élabore son modèle gratifié de la lettre « S« .</p>
<p>les retombées attendues du marché des voitures connectées avoisineraient les 40 milliards de dollars d’ici cinq ans.</p>
</section><a href="#up" style="color:#761c19;">UP</a>


<p>************NODEJS******</p>
<section id="nodejs">
    <p>Node.js nous permet d'utiliser le langage JavaScript sur le serveur.  Il nous permet donc de faire du JavaScript en dehors du navigateur !</p>
    <p>Donc, il vient en remplacement de langages serveur comme PHP, Java EE, etc.</p>
    <p>donc Node.js n'est pas un framework. Node.js est un environnement très bas niveau. </p>
    <p>NodeJS se base sur le modéle non bloquant</p>
    <p>Dès que l'évènement "Fichier téléchargé" apparaît,
        une fonction appelée fonction de callback est appelée et effectue des actions
        (ici, la fonction de callback affiche le fichier).</p>
    <p>Node.js est monothread, contrairement à Apache. Cela veut dire qu'il n'y a qu'un seul processus,
        qu'une seule version du programme qui peut tourner à la fois en mémoire.</p>

</section><a href="#up" style="color:#761c19;">UP</a>

<p>************Modele Blockant et non Blockant******</p>
<section id="bloquant">
   <p> un modèle bloquant :</p>
    <p>Par exemple on a un programme qui a des taches à exécuter par exple:</p>
    <p>Télécharger un fichier,
        Afficher le fichier,
        Faire autre chose</p>
    <p>dans le modéle bloquant il va les exécuter par ordre,  Il lit les lignes de haut en bas</p>
    <p> un modèle non bloquant :</p>
    <p>Le programme n'exécute plus les lignes dans l'ordre où elles sont écrites. Il fait ceci :

        Le programme lance le téléchargement d'un fichier sur Internet,
        Il fait d'autres choses (le programme suit son cours) et
        Dès que le téléchargement est terminé, le programme effectue les actions qu'on lui avait demandées : il affiche le fichier</p>


</section><a href="#up" style="color:#761c19;">UP</a>

<p>************Installation NodeJS******</p>
<section id="installationnode">
    <p>En fait, vous devriez voir avoir 2 programmes installés :</p>
    <p>Node.js : c'est l'intepréteur de commandes de Node.js . Il sert à tester des commandes JS</p>
    <p>Node.js command prompt : c'est une console de Windows configurée pour reconnaître Node.js.
        </p>


</section><a href="#up" style="color:#761c19;">UP</a>

<p>************API REST******</p>
<section id="rest">
<p>Representational state transfer</p>
    <p>REST est un style d'architecture pour les systèmes hypermédia distribués</p>
    <p>Une architecture REST doit respecter les contraintes suivantes :</p>
       <p>1.  Client-serveur : les responsabilités sont séparées entre le client et le serveur. </p>
    <p>2. Sans état : chaque requête d'un client vers un serveur doit contenir toute l'information nécessaire pour permettre au serveur de comprendre la requête, </p>
<p>Mise en cache : le serveur envoie une réponse qui donne l'information sur la propension de cette réponse à être mise en cache, comme la fraîcheur, sa date de création,
    si elle doit être conservée dans le futur. </p>
    <p>Un système hiérarchisé par couche </p>
</section><a href="#up" style="color:#761c19;">UP</a>

<p>***********CYCLE LOGICIEL*****</p>
<section id="cycle">
    <p>désigne toutes les étapes du développement d'un logiciel, de sa conception à sa disparition.</p>
    <p>Le cycle de vie du logiciel comprend généralement a minima les activités suivantes :

       <p> Définition des objectifs, consistant à définir la finalité du projet et son inscription dans une stratégie globale.</p>
    <p> Analyse des besoins et faisabilité, c'est-à-dire l'expression, le recueil et la formalisation des besoins du demandeur (le client) et de l'ensemble des contraintes.</p>
    <p> Conception générale. Il s'agit de l'élaboration des spécifications de l'architecture générale du logiciel.</p>
    <p> Conception détaillée, consistant à définir précisément chaque sous-ensemble du logiciel.</p>
    <p> Codage (Implémentation ou programmation), soit la traduction dans un langage de programmation des fonctionnalités définies lors de phases de conception.</p>
    <p>  Tests unitaires, permettant de vérifier inidividuellement que chaque sous-ensemble du logiciel est implémentée conformément aux spécifications.</p>
    <p>  Intégration, dont l'objectif est de s'assurer de l'interfaçage des différents éléments (modules) du logiciel. Elle fait l'objet de tests d'intégration consignés dans un document.</p>
    <p>  Qualification (ou recette), c'est-à-dire la vérification de la conformité du logiciel aux spécifications initiales.</p>
    <p> Documentation, visant à produire les informations nécessaires pour l'utilisation du logiciel et pour des développements ultérieurs.</p>
    <p>  Mise en production,</p>
    <p>  Maintenance, comprenant toutes les actions correctives (maintenance corrective) et évolutives (maintenance évolutive) sur le logiciel.</p>
    
</section><a href="#up" style="color:#761c19;">UP</a>


<p>***********GAMIFICATION*****</p>
<section id="game">
<p>est le transfert des mécanismes du jeu dans d’autres domaines,
    en particulier des sites web, des situations d'apprentissage,
    des situations de travail ou des réseaux sociaux.
    Son objet est d’augmenter l’acceptabilité et l’usage de ces applications en s’appuyant sur la prédisposition humaine au jeu.
</p>
<p>***********************</p>
<p>***********************</p>
<p>***********************</p>
<p>***********************</p>
<p>***********************</p>
<p>***********************</p><p>**********************</p>
<p>***********************</p>
<p>***********************</p><p>***********************</p>
<p>***********************</p>
<p>***********************</p>
<p>***********************</p>
<p>***********************</p>
<p>***********************</p><p>***********************</p><p>***********************</p>
<p>***********************</p>
<p>***********************</p>
<p>***********************</p>
<p>***********************</p>
<p>***********************</p>
<p>***********************</p>
<p>***********************</p>





